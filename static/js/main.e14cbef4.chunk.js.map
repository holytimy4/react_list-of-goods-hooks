{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortType","setSortType","reorderedGoods","goods","sortBy","reversed","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isChanged","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAML,IA0BaE,EAAU,WACrB,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EAnCkB,SACxBC,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAkBzB,OAhBAG,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQL,GACN,KAAKX,EAASiB,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKhB,EAASmB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAGTR,GACFC,EAAaQ,UAGRR,EAYgBS,CACrBrB,EACAM,EACAH,GAGImB,EAAYhB,IAAaP,EAASM,MAAQF,EAEhD,OACE,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYnB,IAAaP,EAASiB,WAGtCU,QAAS,kBAAMnB,EAAYR,EAASiB,WATtC,iCAcA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYnB,IAAaP,EAASmB,SAGtCQ,QAAS,kBAAMnB,EAAYR,EAASmB,SATtC,4BAcA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAAatB,IAGjBuB,QAAS,kBAAMtB,GAAYD,IAT7B,qBAcEmB,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA9DI,WACZnB,EAAYR,EAASM,MACrBD,GAAW,IAyDL,sBAUJ,6BACE,6BACGI,EAAemB,KAAI,SAAAC,GAAI,OACtB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cC3HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e14cbef4.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nconst getReorderedGoods = (\n  goods: string[],\n  sortBy: SortType,\n  reversed: boolean,\n) => {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortBy) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n  if (reversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n};\n\nexport const App: FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  };\n\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  const isChanged = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(isChanged) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {reorderedGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}